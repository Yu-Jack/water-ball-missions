// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// MapObjectObstacle is a MapObject of type Obstacle.
	MapObjectObstacle MapObject = "O"
	// MapObjectMonster is a MapObject of type Monster.
	MapObjectMonster MapObject = "M"
	// MapObjectCharacter is a MapObject of type Character.
	MapObjectCharacter MapObject = "C"
	// MapObjectTreasure is a MapObject of type treasure.
	MapObjectTreasure MapObject = "x"
	// MapObjectEmpty is a MapObject of type Empty.
	MapObjectEmpty MapObject = ""
	// MapObjectWall is a MapObject of type Wall.
	MapObjectWall MapObject = "W"
)

var ErrInvalidMapObject = errors.New("not a valid MapObject")

// String implements the Stringer interface.
func (x MapObject) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MapObject) IsValid() bool {
	_, err := ParseMapObject(string(x))
	return err == nil
}

var _MapObjectValue = map[string]MapObject{
	"O": MapObjectObstacle,
	"o": MapObjectObstacle,
	"M": MapObjectMonster,
	"m": MapObjectMonster,
	"C": MapObjectCharacter,
	"c": MapObjectCharacter,
	"x": MapObjectTreasure,
	"":  MapObjectEmpty,
	"W": MapObjectWall,
	"w": MapObjectWall,
}

// ParseMapObject attempts to convert a string to a MapObject.
func ParseMapObject(name string) (MapObject, error) {
	if x, ok := _MapObjectValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _MapObjectValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return MapObject(""), fmt.Errorf("%s is %w", name, ErrInvalidMapObject)
}
