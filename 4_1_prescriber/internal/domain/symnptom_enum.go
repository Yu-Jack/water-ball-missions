// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// SymptomSneeze is a Symptom of type Sneeze.
	SymptomSneeze Symptom = "Sneeze"
	// SymptomHeadache is a Symptom of type Headache.
	SymptomHeadache Symptom = "Headache"
	// SymptomCough is a Symptom of type Cough.
	SymptomCough Symptom = "Cough"
	// SymptomSnore is a Symptom of type Snore.
	SymptomSnore Symptom = "Snore"
)

var ErrInvalidSymptom = errors.New("not a valid Symptom")

// String implements the Stringer interface.
func (x Symptom) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Symptom) IsValid() bool {
	_, err := ParseSymptom(string(x))
	return err == nil
}

var _SymptomValue = map[string]Symptom{
	"Sneeze":   SymptomSneeze,
	"sneeze":   SymptomSneeze,
	"Headache": SymptomHeadache,
	"headache": SymptomHeadache,
	"Cough":    SymptomCough,
	"cough":    SymptomCough,
	"Snore":    SymptomSnore,
	"snore":    SymptomSnore,
}

// ParseSymptom attempts to convert a string to a Symptom.
func ParseSymptom(name string) (Symptom, error) {
	if x, ok := _SymptomValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SymptomValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Symptom(""), fmt.Errorf("%s is %w", name, ErrInvalidSymptom)
}
