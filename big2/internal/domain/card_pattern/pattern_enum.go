// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package card_pattern

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CardPatternStraight is a CardPattern of type Straight.
	CardPatternStraight CardPattern = "Straight"
	// CardPatternFullHouse is a CardPattern of type FullHouse.
	CardPatternFullHouse CardPattern = "FullHouse"
	// CardPatternSingle is a CardPattern of type Single.
	CardPatternSingle CardPattern = "Single"
	// CardPatternPair is a CardPattern of type Pair.
	CardPatternPair CardPattern = "Pair"
)

var ErrInvalidCardPattern = errors.New("not a valid CardPattern")

// String implements the Stringer interface.
func (x CardPattern) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x CardPattern) IsValid() bool {
	_, err := ParseCardPattern(string(x))
	return err == nil
}

var _CardPatternValue = map[string]CardPattern{
	"Straight":  CardPatternStraight,
	"straight":  CardPatternStraight,
	"FullHouse": CardPatternFullHouse,
	"fullhouse": CardPatternFullHouse,
	"Single":    CardPatternSingle,
	"single":    CardPatternSingle,
	"Pair":      CardPatternPair,
	"pair":      CardPatternPair,
}

// ParseCardPattern attempts to convert a string to a CardPattern.
func ParseCardPattern(name string) (CardPattern, error) {
	if x, ok := _CardPatternValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CardPatternValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return CardPattern(""), fmt.Errorf("%s is %w", name, ErrInvalidCardPattern)
}
