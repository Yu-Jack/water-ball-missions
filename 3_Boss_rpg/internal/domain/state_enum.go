// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// StateNameCheerUp is a StateName of type CheerUp.
	StateNameCheerUp StateName = "受到鼓舞"
	// StateNameDeath is a StateName of type Death.
	StateNameDeath StateName = "死亡"
	// StateNameNormal is a StateName of type Normal.
	StateNameNormal StateName = "正常"
	// StateNamePetrochemical is a StateName of type Petrochemical.
	StateNamePetrochemical StateName = "石化"
	// StateNamePoisoned is a StateName of type Poisoned.
	StateNamePoisoned StateName = "中毒"
)

var ErrInvalidStateName = errors.New("not a valid StateName")

// String implements the Stringer interface.
func (x StateName) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x StateName) IsValid() bool {
	_, err := ParseStateName(string(x))
	return err == nil
}

var _StateNameValue = map[string]StateName{
	"受到鼓舞": StateNameCheerUp,
	"死亡":   StateNameDeath,
	"正常":   StateNameNormal,
	"石化":   StateNamePetrochemical,
	"中毒":   StateNamePoisoned,
}

// ParseStateName attempts to convert a string to a StateName.
func ParseStateName(name string) (StateName, error) {
	if x, ok := _StateNameValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StateNameValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StateName(""), fmt.Errorf("%s is %w", name, ErrInvalidStateName)
}
