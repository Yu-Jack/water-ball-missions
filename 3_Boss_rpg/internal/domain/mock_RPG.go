// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockRPG is an autogenerated mock type for the RPG type
type MockRPG struct {
	mock.Mock
}

// AddTroop provides a mock function with given fields: troop
func (_m *MockRPG) AddTroop(troop Troop) {
	_m.Called(troop)
}

// GetAllAllies provides a mock function with given fields: troopID
func (_m *MockRPG) GetAllAllies(troopID int) []Role {
	ret := _m.Called(troopID)

	var r0 []Role
	if rf, ok := ret.Get(0).(func(int) []Role); ok {
		r0 = rf(troopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	return r0
}

// GetAllAlliesExcludeSelf provides a mock function with given fields: troopID, roleID
func (_m *MockRPG) GetAllAlliesExcludeSelf(troopID int, roleID int) []Role {
	ret := _m.Called(troopID, roleID)

	var r0 []Role
	if rf, ok := ret.Get(0).(func(int, int) []Role); ok {
		r0 = rf(troopID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	return r0
}

// GetAllEnemies provides a mock function with given fields: troopID
func (_m *MockRPG) GetAllEnemies(troopID int) []Role {
	ret := _m.Called(troopID)

	var r0 []Role
	if rf, ok := ret.Get(0).(func(int) []Role); ok {
		r0 = rf(troopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	return r0
}

// GetAllRolesExcludeSelf provides a mock function with given fields: troopID, roleID
func (_m *MockRPG) GetAllRolesExcludeSelf(troopID int, roleID int) []Role {
	ret := _m.Called(troopID, roleID)

	var r0 []Role
	if rf, ok := ret.Get(0).(func(int, int) []Role); ok {
		r0 = rf(troopID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	return r0
}

// GetAllyTroop provides a mock function with given fields: id
func (_m *MockRPG) GetAllyTroop(id int) Troop {
	ret := _m.Called(id)

	var r0 Troop
	if rf, ok := ret.Get(0).(func(int) Troop); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Troop)
		}
	}

	return r0
}

// GetRole provides a mock function with given fields: troopID, roleID
func (_m *MockRPG) GetRole(troopID int, roleID int) Role {
	ret := _m.Called(troopID, roleID)

	var r0 Role
	if rf, ok := ret.Get(0).(func(int, int) Role); ok {
		r0 = rf(troopID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Role)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockRPG) Start() {
	_m.Called()
}

type mockConstructorTestingTNewMockRPG interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRPG creates a new instance of MockRPG. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRPG(t mockConstructorTestingTNewMockRPG) *MockRPG {
	mock := &MockRPG{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
