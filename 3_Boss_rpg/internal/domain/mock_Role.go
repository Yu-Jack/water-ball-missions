// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockRole is an autogenerated mock type for the Role type
type MockRole struct {
	mock.Mock
}

// ActionS1 provides a mock function with given fields: skillIDs
func (_m *MockRole) ActionS1(skillIDs []int) int {
	ret := _m.Called(skillIDs)

	var r0 int
	if rf, ok := ret.Get(0).(func([]int) int); ok {
		r0 = rf(skillIDs)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ActionS2 provides a mock function with given fields: availableIDs, limit, list
func (_m *MockRole) ActionS2(availableIDs []int, limit int, list string) []int {
	ret := _m.Called(availableIDs, limit, list)

	var r0 []int
	if rf, ok := ret.Get(0).(func([]int, int, string) []int); ok {
		r0 = rf(availableIDs, limit, list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// AddRelation provides a mock function with given fields: observer
func (_m *MockRole) AddRelation(observer RelationObserver) bool {
	ret := _m.Called(observer)

	var r0 bool
	if rf, ok := ret.Get(0).(func(RelationObserver) bool); ok {
		r0 = rf(observer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetExtraStr provides a mock function with given fields:
func (_m *MockRole) GetExtraStr() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetHp provides a mock function with given fields:
func (_m *MockRole) GetHp() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *MockRole) GetID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetMp provides a mock function with given fields:
func (_m *MockRole) GetMp() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockRole) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNameWithTroop provides a mock function with given fields:
func (_m *MockRole) GetNameWithTroop() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRPG provides a mock function with given fields:
func (_m *MockRole) GetRPG() RPG {
	ret := _m.Called()

	var r0 RPG
	if rf, ok := ret.Get(0).(func() RPG); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RPG)
		}
	}

	return r0
}

// GetRelations provides a mock function with given fields:
func (_m *MockRole) GetRelations() []RelationObserver {
	ret := _m.Called()

	var r0 []RelationObserver
	if rf, ok := ret.Get(0).(func() []RelationObserver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RelationObserver)
		}
	}

	return r0
}

// GetState provides a mock function with given fields:
func (_m *MockRole) GetState() State {
	ret := _m.Called()

	var r0 State
	if rf, ok := ret.Get(0).(func() State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	return r0
}

// GetStr provides a mock function with given fields:
func (_m *MockRole) GetStr() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetTroopID provides a mock function with given fields:
func (_m *MockRole) GetTroopID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MinusHp provides a mock function with given fields: hp
func (_m *MockRole) MinusHp(hp int) {
	_m.Called(hp)
}

// MinusMp provides a mock function with given fields: mp
func (_m *MockRole) MinusMp(mp int) {
	_m.Called(mp)
}

// PlusHp provides a mock function with given fields: hp
func (_m *MockRole) PlusHp(hp int) {
	_m.Called(hp)
}

// SetActionAble provides a mock function with given fields: _a0
func (_m *MockRole) SetActionAble(_a0 bool) {
	_m.Called(_a0)
}

// SetExtraStr provides a mock function with given fields: str
func (_m *MockRole) SetExtraStr(str int) {
	_m.Called(str)
}

// SetState provides a mock function with given fields: newState
func (_m *MockRole) SetState(newState State) {
	_m.Called(newState)
}

// TakeAction provides a mock function with given fields:
func (_m *MockRole) TakeAction() {
	_m.Called()
}

type mockConstructorTestingTNewMockRole interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRole creates a new instance of MockRole. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRole(t mockConstructorTestingTNewMockRole) *MockRole {
	mock := &MockRole{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
