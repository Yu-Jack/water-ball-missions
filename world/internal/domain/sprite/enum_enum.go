// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package sprite

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// TypeWater is a Type of type Water.
	TypeWater Type = "Water"
	// TypeFire is a Type of type Fire.
	TypeFire Type = "Fire"
	// TypeHero is a Type of type Hero.
	TypeHero Type = "Hero"
)

var ErrInvalidType = errors.New("not a valid Type")

// String implements the Stringer interface.
func (x Type) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Type) IsValid() bool {
	_, err := ParseType(string(x))
	return err == nil
}

var _TypeValue = map[string]Type{
	"Water": TypeWater,
	"water": TypeWater,
	"Fire":  TypeFire,
	"fire":  TypeFire,
	"Hero":  TypeHero,
	"hero":  TypeHero,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Type(""), fmt.Errorf("%s is %w", name, ErrInvalidType)
}
